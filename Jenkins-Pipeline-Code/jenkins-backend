pipeline {
    agent any
    tools {
        jdk 'jdk'
        nodejs 'nodejs'
    }
    environment {
        // Define environment variables here
        SCANNER_HOME = tool 'sonar-scanner'
        AWS_ACCOUNT_ID = credentials('ACCOUNT_ID')
        AWS_ECR_REPO_NAME = credentials('ECR_REP01') // Adjust if needed
        AWS_DEFAULT_REGION = 'us-east-1'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/"
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git credentialsId: 'GITHUB', url: 'https://github.com/Depuis2031/End-to-End-Kubernetes-Three-Tier-DevSecOps-Project.git'
            }
        }
        stage('Sonarqube Analysis') {
            steps {
                dir('Application-Code/backend') {
                    withSonarQubeEnv('sonar-server') {
                        sh "$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=three-tier-backend -Dsonar.projectKey=three-tier-backend"
                    }
                }
            }
        }
        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }
        stage('OWASP Dependency-Check Scan') {
            steps {
                dir('Application-Code/backend') {
                    dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }
        stage('Trivy File Scan') {
            steps {
                dir('Application-Code/backend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }
        stage("Docker Image Build") {
            steps {
                script {
                    dir('Application-Code/backend/') {
                        sh 'docker system prune -f'
                        sh 'docker container prune -f'
                        sh 'docker build -t backend -f Dockerfile .'
                    }
                }
            }
        }
        stage("ECR Image Pushing") {
            steps {
                script {
                    sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}"
                    sh "docker tag backend:latest ${REPOSITORY_URI}backend:latest"
                    sh "docker push ${REPOSITORY_URI}backend:latest"
                }
            }
        }
        stage("TRIVY Image Scan") {
            steps {
                sh 'trivy image ${REPOSITORY_URI}backend:latest > trivyimage.txt'
            }
        }
        stage('Checkout Code for Update') {
            steps {
                git credentialsId: 'github', url: 'https://github.com/Depuis2031/End-to-End-Kubernetes-Three-Tier-DevSecOps-Project.git'
            }
        }
        stage('Update Deployment file') {
            steps {
                dir('Kubernetes-Manifests-file/Backend') {
                    script {
                        def BUILD_NUMBER = env.BUILD_NUMBER
                        echo "BUILD_NUMBER: ${BUILD_NUMBER}"
                        def imageTag = sh(script: "grep -oP '(?<=backend:)[^ ]+' deployment.yaml", returnStdout: true).trim()
                        echo "Current imageTag: ${imageTag}"
                        sh "sed -i \"s|${REPOSITORY_URI}backend:${imageTag}|${REPOSITORY_URI}backend:${BUILD_NUMBER}|\" deployment.yaml"
                        sh "git config user.email 'lukenjang@gmail.com'"
                        sh "git config user.name 'Depuis2031'"
                        // Use credentials to configure Git user and push changes
                        withCredentials([string(credentialsId: 'GitHub-PAT', variable: 'GITHUB_TOKEN')]) {
                            sh 'git add -A'
                            sh 'git commit -m "Update deployment Image to version ${BUILD_NUMBER}"'
                            // Masking the token using environment variable in URL
                            sh "git push https://${GITHUB_TOKEN}@github.com/Depuis2031/End-to-End-Kubernetes-Three-Tier-DevSecOps-Project.git HEAD:master"
                        }
                    }
                }
            }
        }
    }
}
